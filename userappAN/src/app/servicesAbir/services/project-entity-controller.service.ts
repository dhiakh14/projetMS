/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteItemResourceProjectDelete } from '../fn/project-entity-controller/delete-item-resource-project-delete';
import { DeleteItemResourceProjectDelete$Params } from '../fn/project-entity-controller/delete-item-resource-project-delete';
import { EntityModelProject } from '../models/entity-model-project';
import { getCollectionResourceProjectGet1$Json } from '../fn/project-entity-controller/get-collection-resource-project-get-1-json';
import { GetCollectionResourceProjectGet1$Json$Params } from '../fn/project-entity-controller/get-collection-resource-project-get-1-json';
import { getCollectionResourceProjectGet1$UriList } from '../fn/project-entity-controller/get-collection-resource-project-get-1-uri-list';
import { GetCollectionResourceProjectGet1$UriList$Params } from '../fn/project-entity-controller/get-collection-resource-project-get-1-uri-list';
import { getItemResourceProjectGet } from '../fn/project-entity-controller/get-item-resource-project-get';
import { GetItemResourceProjectGet$Params } from '../fn/project-entity-controller/get-item-resource-project-get';
import { PagedModelEntityModelProject } from '../models/paged-model-entity-model-project';
import { patchItemResourceProjectPatch } from '../fn/project-entity-controller/patch-item-resource-project-patch';
import { PatchItemResourceProjectPatch$Params } from '../fn/project-entity-controller/patch-item-resource-project-patch';
import { postCollectionResourceProjectPost } from '../fn/project-entity-controller/post-collection-resource-project-post';
import { PostCollectionResourceProjectPost$Params } from '../fn/project-entity-controller/post-collection-resource-project-post';
import { putItemResourceProjectPut } from '../fn/project-entity-controller/put-item-resource-project-put';
import { PutItemResourceProjectPut$Params } from '../fn/project-entity-controller/put-item-resource-project-put';

@Injectable({ providedIn: 'root' })
export class ProjectEntityControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCollectionResourceProjectGet1()` */
  static readonly GetCollectionResourceProjectGet1Path = '/projects';

  /**
   * get-project
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCollectionResourceProjectGet1$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCollectionResourceProjectGet1$Json$Response(params?: GetCollectionResourceProjectGet1$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<PagedModelEntityModelProject>> {
    return getCollectionResourceProjectGet1$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * get-project
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCollectionResourceProjectGet1$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCollectionResourceProjectGet1$Json(params?: GetCollectionResourceProjectGet1$Json$Params, context?: HttpContext): Observable<PagedModelEntityModelProject> {
    return this.getCollectionResourceProjectGet1$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<PagedModelEntityModelProject>): PagedModelEntityModelProject => r.body)
    );
  }

  /**
   * get-project
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCollectionResourceProjectGet1$UriList()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCollectionResourceProjectGet1$UriList$Response(params?: GetCollectionResourceProjectGet1$UriList$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getCollectionResourceProjectGet1$UriList(this.http, this.rootUrl, params, context);
  }

  /**
   * get-project
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCollectionResourceProjectGet1$UriList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCollectionResourceProjectGet1$UriList(params?: GetCollectionResourceProjectGet1$UriList$Params, context?: HttpContext): Observable<string> {
    return this.getCollectionResourceProjectGet1$UriList$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `postCollectionResourceProjectPost()` */
  static readonly PostCollectionResourceProjectPostPath = '/projects';

  /**
   * create-project
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `postCollectionResourceProjectPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postCollectionResourceProjectPost$Response(params: PostCollectionResourceProjectPost$Params, context?: HttpContext): Observable<StrictHttpResponse<EntityModelProject>> {
    return postCollectionResourceProjectPost(this.http, this.rootUrl, params, context);
  }

  /**
   * create-project
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `postCollectionResourceProjectPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  postCollectionResourceProjectPost(params: PostCollectionResourceProjectPost$Params, context?: HttpContext): Observable<EntityModelProject> {
    return this.postCollectionResourceProjectPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<EntityModelProject>): EntityModelProject => r.body)
    );
  }

  /** Path part for operation `getItemResourceProjectGet()` */
  static readonly GetItemResourceProjectGetPath = '/projects/{id}';

  /**
   * get-project
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getItemResourceProjectGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getItemResourceProjectGet$Response(params: GetItemResourceProjectGet$Params, context?: HttpContext): Observable<StrictHttpResponse<EntityModelProject>> {
    return getItemResourceProjectGet(this.http, this.rootUrl, params, context);
  }

  /**
   * get-project
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getItemResourceProjectGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getItemResourceProjectGet(params: GetItemResourceProjectGet$Params, context?: HttpContext): Observable<EntityModelProject> {
    return this.getItemResourceProjectGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<EntityModelProject>): EntityModelProject => r.body)
    );
  }

  /** Path part for operation `putItemResourceProjectPut()` */
  static readonly PutItemResourceProjectPutPath = '/projects/{id}';

  /**
   * update-project
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `putItemResourceProjectPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putItemResourceProjectPut$Response(params: PutItemResourceProjectPut$Params, context?: HttpContext): Observable<StrictHttpResponse<EntityModelProject>> {
    return putItemResourceProjectPut(this.http, this.rootUrl, params, context);
  }

  /**
   * update-project
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `putItemResourceProjectPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  putItemResourceProjectPut(params: PutItemResourceProjectPut$Params, context?: HttpContext): Observable<EntityModelProject> {
    return this.putItemResourceProjectPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<EntityModelProject>): EntityModelProject => r.body)
    );
  }

  /** Path part for operation `deleteItemResourceProjectDelete()` */
  static readonly DeleteItemResourceProjectDeletePath = '/projects/{id}';

  /**
   * delete-project
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteItemResourceProjectDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteItemResourceProjectDelete$Response(params: DeleteItemResourceProjectDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteItemResourceProjectDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * delete-project
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteItemResourceProjectDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteItemResourceProjectDelete(params: DeleteItemResourceProjectDelete$Params, context?: HttpContext): Observable<void> {
    return this.deleteItemResourceProjectDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `patchItemResourceProjectPatch()` */
  static readonly PatchItemResourceProjectPatchPath = '/projects/{id}';

  /**
   * patch-project
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `patchItemResourceProjectPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patchItemResourceProjectPatch$Response(params: PatchItemResourceProjectPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<EntityModelProject>> {
    return patchItemResourceProjectPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * patch-project
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `patchItemResourceProjectPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  patchItemResourceProjectPatch(params: PatchItemResourceProjectPatch$Params, context?: HttpContext): Observable<EntityModelProject> {
    return this.patchItemResourceProjectPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<EntityModelProject>): EntityModelProject => r.body)
    );
  }

}
