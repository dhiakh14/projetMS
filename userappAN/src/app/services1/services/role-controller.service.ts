/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { assignRole } from '../fn/role-controller/assign-role';
import { AssignRole$Params } from '../fn/role-controller/assign-role';
import { createRole } from '../fn/role-controller/create-role';
import { CreateRole$Params } from '../fn/role-controller/create-role';
import { getAllRoles } from '../fn/role-controller/get-all-roles';
import { GetAllRoles$Params } from '../fn/role-controller/get-all-roles';
import { getRolesByUserId } from '../fn/role-controller/get-roles-by-user-id';
import { GetRolesByUserId$Params } from '../fn/role-controller/get-roles-by-user-id';

@Injectable({ providedIn: 'root' })
export class RoleControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createRole()` */
  static readonly CreateRolePath = '/roles/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  createRole$Response(params: CreateRole$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return createRole(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createRole(params: CreateRole$Params, context?: HttpContext): Observable<string> {
    return this.createRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `assignRole()` */
  static readonly AssignRolePath = '/roles/assign/{username}/{roleName}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignRole$Response(params: AssignRole$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return assignRole(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignRole(params: AssignRole$Params, context?: HttpContext): Observable<string> {
    return this.assignRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getRolesByUserId()` */
  static readonly GetRolesByUserIdPath = '/roles/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getRolesByUserId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRolesByUserId$Response(params: GetRolesByUserId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getRolesByUserId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getRolesByUserId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getRolesByUserId(params: GetRolesByUserId$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getRolesByUserId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `getAllRoles()` */
  static readonly GetAllRolesPath = '/roles/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllRoles()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRoles$Response(params?: GetAllRoles$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return getAllRoles(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllRoles$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllRoles(params?: GetAllRoles$Params, context?: HttpContext): Observable<Array<string>> {
    return this.getAllRoles$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

}
