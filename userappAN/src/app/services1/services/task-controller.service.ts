/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addTask } from '../fn/task-controller/add-task';
import { AddTask$Params } from '../fn/task-controller/add-task';
<<<<<<< HEAD
import { addTasks } from '../fn/task-controller/add-tasks';
import { AddTasks$Params } from '../fn/task-controller/add-tasks';
import { deleteTask } from '../fn/task-controller/delete-task';
import { DeleteTask$Params } from '../fn/task-controller/delete-task';
import { deleteTasksByProjectId } from '../fn/task-controller/delete-tasks-by-project-id';
import { DeleteTasksByProjectId$Params } from '../fn/task-controller/delete-tasks-by-project-id';
import { exportTasksToCsv } from '../fn/task-controller/export-tasks-to-csv';
import { ExportTasksToCsv$Params } from '../fn/task-controller/export-tasks-to-csv';
=======
import { deleteTask } from '../fn/task-controller/delete-task';
import { DeleteTask$Params } from '../fn/task-controller/delete-task';
>>>>>>> origin/lahmer
import { getAllTasks } from '../fn/task-controller/get-all-tasks';
import { GetAllTasks$Params } from '../fn/task-controller/get-all-tasks';
import { getTaskById } from '../fn/task-controller/get-task-by-id';
import { GetTaskById$Params } from '../fn/task-controller/get-task-by-id';
<<<<<<< HEAD
import { getTasksByProjectId } from '../fn/task-controller/get-tasks-by-project-id';
import { GetTasksByProjectId$Params } from '../fn/task-controller/get-tasks-by-project-id';
import { predictDuration } from '../fn/task-controller/predict-duration';
import { PredictDuration$Params } from '../fn/task-controller/predict-duration';
=======
>>>>>>> origin/lahmer
import { Task } from '../models/task';
import { updateTask } from '../fn/task-controller/update-task';
import { UpdateTask$Params } from '../fn/task-controller/update-task';

@Injectable({ providedIn: 'root' })
export class TaskControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateTask()` */
  static readonly UpdateTaskPath = '/Task/updateTask/{idTask}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask$Response(params: UpdateTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return updateTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTask(params: UpdateTask$Params, context?: HttpContext): Observable<Task> {
    return this.updateTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

<<<<<<< HEAD
  /** Path part for operation `predictDuration()` */
  static readonly PredictDurationPath = '/Task/predictDuration';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `predictDuration()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  predictDuration$Response(params: PredictDuration$Params, context?: HttpContext): Observable<StrictHttpResponse<{
[key: string]: number;
}>> {
    return predictDuration(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `predictDuration$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  predictDuration(params: PredictDuration$Params, context?: HttpContext): Observable<{
[key: string]: number;
}> {
    return this.predictDuration$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
[key: string]: number;
}>): {
[key: string]: number;
} => r.body)
    );
  }

  /** Path part for operation `addTasks()` */
  static readonly AddTasksPath = '/Task/addTasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addTasks()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addTasks$Response(params: AddTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {
    return addTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addTasks$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addTasks(params: AddTasks$Params, context?: HttpContext): Observable<Array<Task>> {
    return this.addTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)
    );
  }

=======
>>>>>>> origin/lahmer
  /** Path part for operation `addTask()` */
  static readonly AddTaskPath = '/Task/addTask';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addTask()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addTask$Response(params: AddTask$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return addTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addTask$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addTask(params: AddTask$Params, context?: HttpContext): Observable<Task> {
    return this.addTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

<<<<<<< HEAD
  /** Path part for operation `getTasksByProjectId()` */
  static readonly GetTasksByProjectIdPath = '/Task/getTasksByProject/{projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTasksByProjectId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByProjectId$Response(params: GetTasksByProjectId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {
    return getTasksByProjectId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTasksByProjectId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByProjectId(params: GetTasksByProjectId$Params, context?: HttpContext): Observable<Array<Task>> {
    return this.getTasksByProjectId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)
    );
  }

=======
>>>>>>> origin/lahmer
  /** Path part for operation `getTaskById()` */
  static readonly GetTaskByIdPath = '/Task/getTaskById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTaskById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskById$Response(params: GetTaskById$Params, context?: HttpContext): Observable<StrictHttpResponse<Task>> {
    return getTaskById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTaskById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTaskById(params: GetTaskById$Params, context?: HttpContext): Observable<Task> {
    return this.getTaskById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Task>): Task => r.body)
    );
  }

  /** Path part for operation `getAllTasks()` */
  static readonly GetAllTasksPath = '/Task/getAllTasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTasks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTasks$Response(params?: GetAllTasks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {
    return getAllTasks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTasks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTasks(params?: GetAllTasks$Params, context?: HttpContext): Observable<Array<Task>> {
    return this.getAllTasks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)
    );
  }

<<<<<<< HEAD
  /** Path part for operation `exportTasksToCsv()` */
  static readonly ExportTasksToCsvPath = '/Task/export';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `exportTasksToCsv()` instead.
   *
   * This method doesn't expect any request body.
   */
  exportTasksToCsv$Response(params?: ExportTasksToCsv$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return exportTasksToCsv(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `exportTasksToCsv$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  exportTasksToCsv(params?: ExportTasksToCsv$Params, context?: HttpContext): Observable<string> {
    return this.exportTasksToCsv$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `deleteTasksByProjectId()` */
  static readonly DeleteTasksByProjectIdPath = '/Task/deleteTasksByProject/{projectId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTasksByProjectId()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTasksByProjectId$Response(params: DeleteTasksByProjectId$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return deleteTasksByProjectId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTasksByProjectId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTasksByProjectId(params: DeleteTasksByProjectId$Params, context?: HttpContext): Observable<string> {
    return this.deleteTasksByProjectId$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

=======
>>>>>>> origin/lahmer
  /** Path part for operation `deleteTask()` */
  static readonly DeleteTaskPath = '/Task/deleteTask/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTask()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask$Response(params: DeleteTask$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTask(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTask$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTask(params: DeleteTask$Params, context?: HttpContext): Observable<void> {
    return this.deleteTask$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
