/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteGanttChart } from '../fn/gantt-chart-controller/delete-gantt-chart';
import { DeleteGanttChart$Params } from '../fn/gantt-chart-controller/delete-gantt-chart';
import { GanttChart } from '../models/gantt-chart';
import { getAllGanttCharts } from '../fn/gantt-chart-controller/get-all-gantt-charts';
import { GetAllGanttCharts$Params } from '../fn/gantt-chart-controller/get-all-gantt-charts';
import { getGanttChartById } from '../fn/gantt-chart-controller/get-gantt-chart-by-id';
import { GetGanttChartById$Params } from '../fn/gantt-chart-controller/get-gantt-chart-by-id';
import { getTasksByGanttChartId } from '../fn/gantt-chart-controller/get-tasks-by-gantt-chart-id';
import { GetTasksByGanttChartId$Params } from '../fn/gantt-chart-controller/get-tasks-by-gantt-chart-id';
import { saveGanttChart } from '../fn/gantt-chart-controller/save-gantt-chart';
import { SaveGanttChart$Params } from '../fn/gantt-chart-controller/save-gantt-chart';
import { Task } from '../models/task';
import { updateGanttChart } from '../fn/gantt-chart-controller/update-gantt-chart';
import { UpdateGanttChart$Params } from '../fn/gantt-chart-controller/update-gantt-chart';

@Injectable({ providedIn: 'root' })
export class GanttChartControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateGanttChart()` */
  static readonly UpdateGanttChartPath = '/gantt-chart/update/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateGanttChart()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateGanttChart$Response(params: UpdateGanttChart$Params, context?: HttpContext): Observable<StrictHttpResponse<GanttChart>> {
    return updateGanttChart(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateGanttChart$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateGanttChart(params: UpdateGanttChart$Params, context?: HttpContext): Observable<GanttChart> {
    return this.updateGanttChart$Response(params, context).pipe(
      map((r: StrictHttpResponse<GanttChart>): GanttChart => r.body)
    );
  }

  /** Path part for operation `saveGanttChart()` */
  static readonly SaveGanttChartPath = '/gantt-chart/save';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `saveGanttChart()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveGanttChart$Response(params: SaveGanttChart$Params, context?: HttpContext): Observable<StrictHttpResponse<GanttChart>> {
    return saveGanttChart(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `saveGanttChart$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  saveGanttChart(params: SaveGanttChart$Params, context?: HttpContext): Observable<GanttChart> {
    return this.saveGanttChart$Response(params, context).pipe(
      map((r: StrictHttpResponse<GanttChart>): GanttChart => r.body)
    );
  }

  /** Path part for operation `getTasksByGanttChartId()` */
  static readonly GetTasksByGanttChartIdPath = '/gantt-chart/{ganttChartId}/tasks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTasksByGanttChartId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByGanttChartId$Response(params: GetTasksByGanttChartId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Task>>> {
    return getTasksByGanttChartId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTasksByGanttChartId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTasksByGanttChartId(params: GetTasksByGanttChartId$Params, context?: HttpContext): Observable<Array<Task>> {
    return this.getTasksByGanttChartId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Task>>): Array<Task> => r.body)
    );
  }

  /** Path part for operation `getGanttChartById()` */
  static readonly GetGanttChartByIdPath = '/gantt-chart/getGanttChartById/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getGanttChartById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGanttChartById$Response(params: GetGanttChartById$Params, context?: HttpContext): Observable<StrictHttpResponse<GanttChart>> {
    return getGanttChartById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getGanttChartById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getGanttChartById(params: GetGanttChartById$Params, context?: HttpContext): Observable<GanttChart> {
    return this.getGanttChartById$Response(params, context).pipe(
      map((r: StrictHttpResponse<GanttChart>): GanttChart => r.body)
    );
  }

  /** Path part for operation `getAllGanttCharts()` */
  static readonly GetAllGanttChartsPath = '/gantt-chart/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllGanttCharts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllGanttCharts$Response(params?: GetAllGanttCharts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GanttChart>>> {
    return getAllGanttCharts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllGanttCharts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllGanttCharts(params?: GetAllGanttCharts$Params, context?: HttpContext): Observable<Array<GanttChart>> {
    return this.getAllGanttCharts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<GanttChart>>): Array<GanttChart> => r.body)
    );
  }

  /** Path part for operation `deleteGanttChart()` */
  static readonly DeleteGanttChartPath = '/gantt-chart/deleteGanttChart/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteGanttChart()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteGanttChart$Response(params: DeleteGanttChart$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteGanttChart(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteGanttChart$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteGanttChart(params: DeleteGanttChart$Params, context?: HttpContext): Observable<void> {
    return this.deleteGanttChart$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
<<<<<<< HEAD
=======

export { SaveGanttChart$Params };
>>>>>>> origin/lahmer
