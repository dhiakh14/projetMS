/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { ajouterFacture } from '../fn/rest/ajouter-facture';
import { AjouterFacture$Params } from '../fn/rest/ajouter-facture';
import { deleteFactureById } from '../fn/rest/delete-facture-by-id';
import { DeleteFactureById$Params } from '../fn/rest/delete-facture-by-id';
import { Facture } from '../models/facture';
import { retrieveAllFacture } from '../fn/rest/retrieve-all-facture';
import { RetrieveAllFacture$Params } from '../fn/rest/retrieve-all-facture';
import { retrieveById } from '../fn/rest/retrieve-by-id';
import { RetrieveById$Params } from '../fn/rest/retrieve-by-id';
import { updateFacture } from '../fn/rest/update-facture';
import { UpdateFacture$Params } from '../fn/rest/update-facture';

@Injectable({ providedIn: 'root' })
export class RestService extends BaseService {
  apiUrl: string;

  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
    this.apiUrl = config.rootUrl;
  }

  /** Path part for operation `updateFacture()` */
  static readonly UpdateFacturePath = '/Rest/updateFacture';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateFacture()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFacture$Response(params: UpdateFacture$Params, context?: HttpContext): Observable<StrictHttpResponse<Facture>> {
    return updateFacture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateFacture$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateFacture(params: UpdateFacture$Params, context?: HttpContext): Observable<Facture> {
    return this.updateFacture$Response(params, context).pipe(
      map((r: StrictHttpResponse<Facture>): Facture => r.body)
    );
  }

  /** Path part for operation `ajouterFacture()` */
  static readonly AjouterFacturePath = '/Rest/ajouterFacture';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ajouterFacture()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ajouterFacture$Response(params: AjouterFacture$Params, context?: HttpContext): Observable<StrictHttpResponse<Facture>> {
    return ajouterFacture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ajouterFacture$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ajouterFacture(params: AjouterFacture$Params, context?: HttpContext): Observable<Facture> {
    return this.ajouterFacture$Response(params, context).pipe(
      map((r: StrictHttpResponse<Facture>): Facture => r.body)
    );
  }

  /** Path part for operation `retrieveAllFacture()` */
  static readonly RetrieveAllFacturePath = '/Rest/getAllFacture';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `retrieveAllFacture()` instead.
   *
   * This method doesn't expect any request body.
   */
  retrieveAllFacture$Response(params?: RetrieveAllFacture$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Facture>>> {
    return retrieveAllFacture(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `retrieveAllFacture$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  retrieveAllFacture(params?: RetrieveAllFacture$Params, context?: HttpContext): Observable<Array<Facture>> {
    return this.retrieveAllFacture$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Facture>>): Array<Facture> => r.body)
    );
  }

  /** Path part for operation `retrieveById()` */
  static readonly RetrieveByIdPath = '/Rest/findById/{idF}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `retrieveById()` instead.
   *
   * This method doesn't expect any request body.
   */
  retrieveById$Response(params: RetrieveById$Params, context?: HttpContext): Observable<StrictHttpResponse<Facture>> {
    return retrieveById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `retrieveById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  retrieveById(params: RetrieveById$Params, context?: HttpContext): Observable<Facture> {
    return this.retrieveById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Facture>): Facture => r.body)
    );
  }

  /** Path part for operation `deleteFactureById()` */
  static readonly DeleteFactureByIdPath = '/Rest/deleteE/{idF}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteFactureById()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFactureById$Response(params: DeleteFactureById$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteFactureById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteFactureById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteFactureById(params: DeleteFactureById$Params, context?: HttpContext): Observable<void> {
    return this.deleteFactureById$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  // service.ts
retrieveFacturesPaginated(page: number, limit: number): Observable<Facture[]> {
  return this.http.get<Facture[]>(`${this.apiUrl}/factures?page=${page}&limit=${limit}`);
}


}
