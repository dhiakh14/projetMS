/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { assignAndReplaceRoleToUser } from '../fn/user-controller/assign-and-replace-role-to-user';
import { AssignAndReplaceRoleToUser$Params } from '../fn/user-controller/assign-and-replace-role-to-user';
import { assignRoleToUser } from '../fn/user-controller/assign-role-to-user';
import { AssignRoleToUser$Params } from '../fn/user-controller/assign-role-to-user';
import { banUser } from '../fn/user-controller/ban-user';
import { BanUser$Params } from '../fn/user-controller/ban-user';
import { getAllUsersExceptMe } from '../fn/user-controller/get-all-users-except-me';
import { GetAllUsersExceptMe$Params } from '../fn/user-controller/get-all-users-except-me';
import { getProfile } from '../fn/user-controller/get-profile';
import { GetProfile$Params } from '../fn/user-controller/get-profile';
import { User } from '../models/user';

@Injectable({ providedIn: 'root' })
export class UserControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `banUser()` */
  static readonly BanUserPath = '/users/{idUser}/ban';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `banUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  banUser$Response(params: BanUser$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return banUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `banUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  banUser(params: BanUser$Params, context?: HttpContext): Observable<string> {
    return this.banUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `assignAndReplaceRoleToUser()` */
  static readonly AssignAndReplaceRoleToUserPath = '/users/{idUser}/assignAndReplaceRoleToUser';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignAndReplaceRoleToUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignAndReplaceRoleToUser$Response(params: AssignAndReplaceRoleToUser$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return assignAndReplaceRoleToUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignAndReplaceRoleToUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignAndReplaceRoleToUser(params: AssignAndReplaceRoleToUser$Params, context?: HttpContext): Observable<string> {
    return this.assignAndReplaceRoleToUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `assignRoleToUser()` */
  static readonly AssignRoleToUserPath = '/users/{idUser}/assign-role';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignRoleToUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignRoleToUser$Response(params: AssignRoleToUser$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return assignRoleToUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignRoleToUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignRoleToUser(params: AssignRoleToUser$Params, context?: HttpContext): Observable<string> {
    return this.assignRoleToUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `getProfile()` */
  static readonly GetProfilePath = '/users/getUserById/{idUser}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProfile()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProfile$Response(params: GetProfile$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return getProfile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProfile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProfile(params: GetProfile$Params, context?: HttpContext): Observable<User> {
    return this.getProfile$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `getAllUsersExceptMe()` */
  static readonly GetAllUsersExceptMePath = '/users/all-except-me';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsersExceptMe()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsersExceptMe$Response(params: GetAllUsersExceptMe$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<User>>> {
    return getAllUsersExceptMe(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsersExceptMe$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsersExceptMe(params: GetAllUsersExceptMe$Params, context?: HttpContext): Observable<Array<User>> {
    return this.getAllUsersExceptMe$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<User>>): Array<User> => r.body)
    );
  }

}
